
SOMENAME.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d88  080001a8  080001a8  000101a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f30  08000f38  00010f38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f30  08000f30  00010f38  2**0
                  CONTENTS
  4 .ARM          00000000  08000f30  08000f30  00010f38  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f30  08000f38  00010f38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f30  08000f30  00010f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f34  08000f34  00010f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010f38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000f38  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000f38  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010f38  2**0
                  CONTENTS, READONLY
 12 .debug_info   000012ed  00000000  00000000  00010f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000373  00000000  00000000  00012255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d8  00000000  00000000  000125c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000c0  00000000  00000000  000126a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000140c  00000000  00000000  00012760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000bfb  00000000  00000000  00013b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008ad0  00000000  00000000  00014767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0001d237  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003c4  00000000  00000000  0001d28c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000f18 	.word	0x08000f18

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000f18 	.word	0x08000f18

080001e8 <__aeabi_dmul>:
 80001e8:	b570      	push	{r4, r5, r6, lr}
 80001ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001f6:	bf1d      	ittte	ne
 80001f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001fc:	ea94 0f0c 	teqne	r4, ip
 8000200:	ea95 0f0c 	teqne	r5, ip
 8000204:	f000 f8de 	bleq	80003c4 <__aeabi_dmul+0x1dc>
 8000208:	442c      	add	r4, r5
 800020a:	ea81 0603 	eor.w	r6, r1, r3
 800020e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000212:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000216:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021a:	bf18      	it	ne
 800021c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000228:	d038      	beq.n	800029c <__aeabi_dmul+0xb4>
 800022a:	fba0 ce02 	umull	ip, lr, r0, r2
 800022e:	f04f 0500 	mov.w	r5, #0
 8000232:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000236:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800023a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800023e:	f04f 0600 	mov.w	r6, #0
 8000242:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000246:	f09c 0f00 	teq	ip, #0
 800024a:	bf18      	it	ne
 800024c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000250:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000254:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000258:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800025c:	d204      	bcs.n	8000268 <__aeabi_dmul+0x80>
 800025e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000262:	416d      	adcs	r5, r5
 8000264:	eb46 0606 	adc.w	r6, r6, r6
 8000268:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800026c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000270:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000274:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000278:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800027c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000280:	bf88      	it	hi
 8000282:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000286:	d81e      	bhi.n	80002c6 <__aeabi_dmul+0xde>
 8000288:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a0:	ea46 0101 	orr.w	r1, r6, r1
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	ea81 0103 	eor.w	r1, r1, r3
 80002ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b0:	bfc2      	ittt	gt
 80002b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	popgt	{r4, r5, r6, pc}
 80002bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c0:	f04f 0e00 	mov.w	lr, #0
 80002c4:	3c01      	subs	r4, #1
 80002c6:	f300 80ab 	bgt.w	8000420 <__aeabi_dmul+0x238>
 80002ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ce:	bfde      	ittt	le
 80002d0:	2000      	movle	r0, #0
 80002d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002d6:	bd70      	pople	{r4, r5, r6, pc}
 80002d8:	f1c4 0400 	rsb	r4, r4, #0
 80002dc:	3c20      	subs	r4, #32
 80002de:	da35      	bge.n	800034c <__aeabi_dmul+0x164>
 80002e0:	340c      	adds	r4, #12
 80002e2:	dc1b      	bgt.n	800031c <__aeabi_dmul+0x134>
 80002e4:	f104 0414 	add.w	r4, r4, #20
 80002e8:	f1c4 0520 	rsb	r5, r4, #32
 80002ec:	fa00 f305 	lsl.w	r3, r0, r5
 80002f0:	fa20 f004 	lsr.w	r0, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea40 0002 	orr.w	r0, r0, r2
 80002fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000300:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000304:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000308:	fa21 f604 	lsr.w	r6, r1, r4
 800030c:	eb42 0106 	adc.w	r1, r2, r6
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f1c4 040c 	rsb	r4, r4, #12
 8000320:	f1c4 0520 	rsb	r5, r4, #32
 8000324:	fa00 f304 	lsl.w	r3, r0, r4
 8000328:	fa20 f005 	lsr.w	r0, r0, r5
 800032c:	fa01 f204 	lsl.w	r2, r1, r4
 8000330:	ea40 0002 	orr.w	r0, r0, r2
 8000334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000338:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f205 	lsl.w	r2, r0, r5
 8000354:	ea4e 0e02 	orr.w	lr, lr, r2
 8000358:	fa20 f304 	lsr.w	r3, r0, r4
 800035c:	fa01 f205 	lsl.w	r2, r1, r5
 8000360:	ea43 0302 	orr.w	r3, r3, r2
 8000364:	fa21 f004 	lsr.w	r0, r1, r4
 8000368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800036c:	fa21 f204 	lsr.w	r2, r1, r4
 8000370:	ea20 0002 	bic.w	r0, r0, r2
 8000374:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f094 0f00 	teq	r4, #0
 8000388:	d10f      	bne.n	80003aa <__aeabi_dmul+0x1c2>
 800038a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800038e:	0040      	lsls	r0, r0, #1
 8000390:	eb41 0101 	adc.w	r1, r1, r1
 8000394:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3c01      	subeq	r4, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1a6>
 800039e:	ea41 0106 	orr.w	r1, r1, r6
 80003a2:	f095 0f00 	teq	r5, #0
 80003a6:	bf18      	it	ne
 80003a8:	4770      	bxne	lr
 80003aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ae:	0052      	lsls	r2, r2, #1
 80003b0:	eb43 0303 	adc.w	r3, r3, r3
 80003b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3d01      	subeq	r5, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1c6>
 80003be:	ea43 0306 	orr.w	r3, r3, r6
 80003c2:	4770      	bx	lr
 80003c4:	ea94 0f0c 	teq	r4, ip
 80003c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003cc:	bf18      	it	ne
 80003ce:	ea95 0f0c 	teqne	r5, ip
 80003d2:	d00c      	beq.n	80003ee <__aeabi_dmul+0x206>
 80003d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d8:	bf18      	it	ne
 80003da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003de:	d1d1      	bne.n	8000384 <__aeabi_dmul+0x19c>
 80003e0:	ea81 0103 	eor.w	r1, r1, r3
 80003e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd70      	pop	{r4, r5, r6, pc}
 80003ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f2:	bf06      	itte	eq
 80003f4:	4610      	moveq	r0, r2
 80003f6:	4619      	moveq	r1, r3
 80003f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fc:	d019      	beq.n	8000432 <__aeabi_dmul+0x24a>
 80003fe:	ea94 0f0c 	teq	r4, ip
 8000402:	d102      	bne.n	800040a <__aeabi_dmul+0x222>
 8000404:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000408:	d113      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800040a:	ea95 0f0c 	teq	r5, ip
 800040e:	d105      	bne.n	800041c <__aeabi_dmul+0x234>
 8000410:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000414:	bf1c      	itt	ne
 8000416:	4610      	movne	r0, r2
 8000418:	4619      	movne	r1, r3
 800041a:	d10a      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800041c:	ea81 0103 	eor.w	r1, r1, r3
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd70      	pop	{r4, r5, r6, pc}
 8000432:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000436:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800043a:	bd70      	pop	{r4, r5, r6, pc}

0800043c <__aeabi_drsub>:
 800043c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000440:	e002      	b.n	8000448 <__adddf3>
 8000442:	bf00      	nop

08000444 <__aeabi_dsub>:
 8000444:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000448 <__adddf3>:
 8000448:	b530      	push	{r4, r5, lr}
 800044a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800044e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	bf1f      	itttt	ne
 800045e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000462:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000466:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800046e:	f000 80e2 	beq.w	8000636 <__adddf3+0x1ee>
 8000472:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000476:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047a:	bfb8      	it	lt
 800047c:	426d      	neglt	r5, r5
 800047e:	dd0c      	ble.n	800049a <__adddf3+0x52>
 8000480:	442c      	add	r4, r5
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	ea82 0000 	eor.w	r0, r2, r0
 800048e:	ea83 0101 	eor.w	r1, r3, r1
 8000492:	ea80 0202 	eor.w	r2, r0, r2
 8000496:	ea81 0303 	eor.w	r3, r1, r3
 800049a:	2d36      	cmp	r5, #54	; 0x36
 800049c:	bf88      	it	hi
 800049e:	bd30      	pophi	{r4, r5, pc}
 80004a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x70>
 80004b2:	4240      	negs	r0, r0
 80004b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x84>
 80004c6:	4252      	negs	r2, r2
 80004c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004cc:	ea94 0f05 	teq	r4, r5
 80004d0:	f000 80a7 	beq.w	8000622 <__adddf3+0x1da>
 80004d4:	f1a4 0401 	sub.w	r4, r4, #1
 80004d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004dc:	db0d      	blt.n	80004fa <__adddf3+0xb2>
 80004de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e2:	fa22 f205 	lsr.w	r2, r2, r5
 80004e6:	1880      	adds	r0, r0, r2
 80004e8:	f141 0100 	adc.w	r1, r1, #0
 80004ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f0:	1880      	adds	r0, r0, r2
 80004f2:	fa43 f305 	asr.w	r3, r3, r5
 80004f6:	4159      	adcs	r1, r3
 80004f8:	e00e      	b.n	8000518 <__adddf3+0xd0>
 80004fa:	f1a5 0520 	sub.w	r5, r5, #32
 80004fe:	f10e 0e20 	add.w	lr, lr, #32
 8000502:	2a01      	cmp	r2, #1
 8000504:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000508:	bf28      	it	cs
 800050a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	d507      	bpl.n	800052e <__adddf3+0xe6>
 800051e:	f04f 0e00 	mov.w	lr, #0
 8000522:	f1dc 0c00 	rsbs	ip, ip, #0
 8000526:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052a:	eb6e 0101 	sbc.w	r1, lr, r1
 800052e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000532:	d31b      	bcc.n	800056c <__adddf3+0x124>
 8000534:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000538:	d30c      	bcc.n	8000554 <__adddf3+0x10c>
 800053a:	0849      	lsrs	r1, r1, #1
 800053c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000540:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000544:	f104 0401 	add.w	r4, r4, #1
 8000548:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800054c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000550:	f080 809a 	bcs.w	8000688 <__adddf3+0x240>
 8000554:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000558:	bf08      	it	eq
 800055a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800055e:	f150 0000 	adcs.w	r0, r0, #0
 8000562:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000566:	ea41 0105 	orr.w	r1, r1, r5
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000570:	4140      	adcs	r0, r0
 8000572:	eb41 0101 	adc.w	r1, r1, r1
 8000576:	3c01      	subs	r4, #1
 8000578:	bf28      	it	cs
 800057a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800057e:	d2e9      	bcs.n	8000554 <__adddf3+0x10c>
 8000580:	f091 0f00 	teq	r1, #0
 8000584:	bf04      	itt	eq
 8000586:	4601      	moveq	r1, r0
 8000588:	2000      	moveq	r0, #0
 800058a:	fab1 f381 	clz	r3, r1
 800058e:	bf08      	it	eq
 8000590:	3320      	addeq	r3, #32
 8000592:	f1a3 030b 	sub.w	r3, r3, #11
 8000596:	f1b3 0220 	subs.w	r2, r3, #32
 800059a:	da0c      	bge.n	80005b6 <__adddf3+0x16e>
 800059c:	320c      	adds	r2, #12
 800059e:	dd08      	ble.n	80005b2 <__adddf3+0x16a>
 80005a0:	f102 0c14 	add.w	ip, r2, #20
 80005a4:	f1c2 020c 	rsb	r2, r2, #12
 80005a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ac:	fa21 f102 	lsr.w	r1, r1, r2
 80005b0:	e00c      	b.n	80005cc <__adddf3+0x184>
 80005b2:	f102 0214 	add.w	r2, r2, #20
 80005b6:	bfd8      	it	le
 80005b8:	f1c2 0c20 	rsble	ip, r2, #32
 80005bc:	fa01 f102 	lsl.w	r1, r1, r2
 80005c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c4:	bfdc      	itt	le
 80005c6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ca:	4090      	lslle	r0, r2
 80005cc:	1ae4      	subs	r4, r4, r3
 80005ce:	bfa2      	ittt	ge
 80005d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d4:	4329      	orrge	r1, r5
 80005d6:	bd30      	popge	{r4, r5, pc}
 80005d8:	ea6f 0404 	mvn.w	r4, r4
 80005dc:	3c1f      	subs	r4, #31
 80005de:	da1c      	bge.n	800061a <__adddf3+0x1d2>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc0e      	bgt.n	8000602 <__adddf3+0x1ba>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0220 	rsb	r2, r4, #32
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f302 	lsl.w	r3, r1, r2
 80005f4:	ea40 0003 	orr.w	r0, r0, r3
 80005f8:	fa21 f304 	lsr.w	r3, r1, r4
 80005fc:	ea45 0103 	orr.w	r1, r5, r3
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f1c4 040c 	rsb	r4, r4, #12
 8000606:	f1c4 0220 	rsb	r2, r4, #32
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 f304 	lsl.w	r3, r1, r4
 8000612:	ea40 0003 	orr.w	r0, r0, r3
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	fa21 f004 	lsr.w	r0, r1, r4
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f094 0f00 	teq	r4, #0
 8000626:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800062a:	bf06      	itte	eq
 800062c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000630:	3401      	addeq	r4, #1
 8000632:	3d01      	subne	r5, #1
 8000634:	e74e      	b.n	80004d4 <__adddf3+0x8c>
 8000636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063a:	bf18      	it	ne
 800063c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000640:	d029      	beq.n	8000696 <__adddf3+0x24e>
 8000642:	ea94 0f05 	teq	r4, r5
 8000646:	bf08      	it	eq
 8000648:	ea90 0f02 	teqeq	r0, r2
 800064c:	d005      	beq.n	800065a <__adddf3+0x212>
 800064e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000652:	bf04      	itt	eq
 8000654:	4619      	moveq	r1, r3
 8000656:	4610      	moveq	r0, r2
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	ea91 0f03 	teq	r1, r3
 800065e:	bf1e      	ittt	ne
 8000660:	2100      	movne	r1, #0
 8000662:	2000      	movne	r0, #0
 8000664:	bd30      	popne	{r4, r5, pc}
 8000666:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066a:	d105      	bne.n	8000678 <__adddf3+0x230>
 800066c:	0040      	lsls	r0, r0, #1
 800066e:	4149      	adcs	r1, r1
 8000670:	bf28      	it	cs
 8000672:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800067c:	bf3c      	itt	cc
 800067e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000682:	bd30      	popcc	{r4, r5, pc}
 8000684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000688:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800068c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000690:	f04f 0000 	mov.w	r0, #0
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069a:	bf1a      	itte	ne
 800069c:	4619      	movne	r1, r3
 800069e:	4610      	movne	r0, r2
 80006a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a4:	bf1c      	itt	ne
 80006a6:	460b      	movne	r3, r1
 80006a8:	4602      	movne	r2, r0
 80006aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ae:	bf06      	itte	eq
 80006b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b4:	ea91 0f03 	teqeq	r1, r3
 80006b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	bf00      	nop

080006c0 <__aeabi_ui2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f04f 0500 	mov.w	r5, #0
 80006d8:	f04f 0100 	mov.w	r1, #0
 80006dc:	e750      	b.n	8000580 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_i2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f8:	bf48      	it	mi
 80006fa:	4240      	negmi	r0, r0
 80006fc:	f04f 0100 	mov.w	r1, #0
 8000700:	e73e      	b.n	8000580 <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_f2d>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000712:	bf1f      	itttt	ne
 8000714:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000718:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800071c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000720:	4770      	bxne	lr
 8000722:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000726:	bf08      	it	eq
 8000728:	4770      	bxeq	lr
 800072a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800072e:	bf04      	itt	eq
 8000730:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000734:	4770      	bxeq	lr
 8000736:	b530      	push	{r4, r5, lr}
 8000738:	f44f 7460 	mov.w	r4, #896	; 0x380
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	e71c      	b.n	8000580 <__adddf3+0x138>
 8000746:	bf00      	nop

08000748 <__aeabi_ul2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f04f 0500 	mov.w	r5, #0
 8000756:	e00a      	b.n	800076e <__aeabi_l2d+0x16>

08000758 <__aeabi_l2d>:
 8000758:	ea50 0201 	orrs.w	r2, r0, r1
 800075c:	bf08      	it	eq
 800075e:	4770      	bxeq	lr
 8000760:	b530      	push	{r4, r5, lr}
 8000762:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000766:	d502      	bpl.n	800076e <__aeabi_l2d+0x16>
 8000768:	4240      	negs	r0, r0
 800076a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800076e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000772:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000776:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077a:	f43f aed8 	beq.w	800052e <__adddf3+0xe6>
 800077e:	f04f 0203 	mov.w	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000796:	f1c2 0320 	rsb	r3, r2, #32
 800079a:	fa00 fc03 	lsl.w	ip, r0, r3
 800079e:	fa20 f002 	lsr.w	r0, r0, r2
 80007a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007a6:	ea40 000e 	orr.w	r0, r0, lr
 80007aa:	fa21 f102 	lsr.w	r1, r1, r2
 80007ae:	4414      	add	r4, r2
 80007b0:	e6bd      	b.n	800052e <__adddf3+0xe6>
 80007b2:	bf00      	nop

080007b4 <__aeabi_d2uiz>:
 80007b4:	004a      	lsls	r2, r1, #1
 80007b6:	d211      	bcs.n	80007dc <__aeabi_d2uiz+0x28>
 80007b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007bc:	d211      	bcs.n	80007e2 <__aeabi_d2uiz+0x2e>
 80007be:	d50d      	bpl.n	80007dc <__aeabi_d2uiz+0x28>
 80007c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007c8:	d40e      	bmi.n	80007e8 <__aeabi_d2uiz+0x34>
 80007ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007d6:	fa23 f002 	lsr.w	r0, r3, r2
 80007da:	4770      	bx	lr
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007e6:	d102      	bne.n	80007ee <__aeabi_d2uiz+0x3a>
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ec:	4770      	bx	lr
 80007ee:	f04f 0000 	mov.w	r0, #0
 80007f2:	4770      	bx	lr
 80007f4:	0000      	movs	r0, r0
	...

080007f8 <main>:
uint8_t buff[100];

/**********************************************************************************************************/

int main(void)
   {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
	//uint8_t timestamp;
	//float temp;
	gpio_init();
 80007fe:	f000 f885 	bl	800090c <gpio_init>
	pwm_init();
 8000802:	f000 fa63 	bl	8000ccc <pwm_init>
	ADC_init_TIMER_TRIGER();
 8000806:	f000 faa9 	bl	8000d5c <ADC_init_TIMER_TRIGER>

	UART_Rx_TX_Init();
 800080a:	f000 fa11 	bl	8000c30 <UART_Rx_TX_Init>
	spi_init();
 800080e:	f000 f8a3 	bl	8000958 <spi_init>

	adc_start();
 8000812:	f000 fb11 	bl	8000e38 <adc_start>

	SPI1->CR1|=SPE;
 8000816:	4b38      	ldr	r3, [pc, #224]	; (80008f8 <main+0x100>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a37      	ldr	r2, [pc, #220]	; (80008f8 <main+0x100>)
 800081c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000820:	6013      	str	r3, [r2, #0]
	int16_t rbuf[4];

	spi_write(0x20, 0x67U);
 8000822:	2167      	movs	r1, #103	; 0x67
 8000824:	2020      	movs	r0, #32
 8000826:	f000 f975 	bl	8000b14 <spi_write>

	spi_write(0x24U, 0x48U);
 800082a:	2148      	movs	r1, #72	; 0x48
 800082c:	2024      	movs	r0, #36	; 0x24
 800082e:	f000 f971 	bl	8000b14 <spi_write>

    for(int i=0; i<10000000; i++);
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	e002      	b.n	800083e <main+0x46>
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	3301      	adds	r3, #1
 800083c:	617b      	str	r3, [r7, #20]
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	4a2e      	ldr	r2, [pc, #184]	; (80008fc <main+0x104>)
 8000842:	4293      	cmp	r3, r2
 8000844:	dbf8      	blt.n	8000838 <main+0x40>

    rbuf[0]=(uint8_t)spi_read(0x0f);
 8000846:	200f      	movs	r0, #15
 8000848:	f000 f91e 	bl	8000a88 <spi_read>
 800084c:	4603      	mov	r3, r0
 800084e:	b2db      	uxtb	r3, r3
 8000850:	b21b      	sxth	r3, r3
 8000852:	803b      	strh	r3, [r7, #0]


while(1)
	{

	DATA=adc_get_data();
 8000854:	f000 fb00 	bl	8000e58 <adc_get_data>
 8000858:	4603      	mov	r3, r0
 800085a:	4a29      	ldr	r2, [pc, #164]	; (8000900 <main+0x108>)
 800085c:	6013      	str	r3, [r2, #0]

    uint8_t  temp=DATA/RES*VREF;
 800085e:	4b28      	ldr	r3, [pc, #160]	; (8000900 <main+0x108>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	0b1b      	lsrs	r3, r3, #12
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff2b 	bl	80006c0 <__aeabi_ui2d>
 800086a:	a321      	add	r3, pc, #132	; (adr r3, 80008f0 <main+0xf8>)
 800086c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000870:	f7ff fcba 	bl	80001e8 <__aeabi_dmul>
 8000874:	4602      	mov	r2, r0
 8000876:	460b      	mov	r3, r1
 8000878:	4610      	mov	r0, r2
 800087a:	4619      	mov	r1, r3
 800087c:	f7ff ff9a 	bl	80007b4 <__aeabi_d2uiz>
 8000880:	4603      	mov	r3, r0
 8000882:	72fb      	strb	r3, [r7, #11]
    USART_WRITE(temp);
 8000884:	7afb      	ldrb	r3, [r7, #11]
 8000886:	4618      	mov	r0, r3
 8000888:	f000 fa08 	bl	8000c9c <USART_WRITE>
	tim_oc_init();
 800088c:	f000 f986 	bl	8000b9c <tim_oc_init>

	rbuf[1]=spi_read((uint8_t) 0x29U);
 8000890:	2029      	movs	r0, #41	; 0x29
 8000892:	f000 f8f9 	bl	8000a88 <spi_read>
 8000896:	4603      	mov	r3, r0
 8000898:	b21b      	sxth	r3, r3
 800089a:	807b      	strh	r3, [r7, #2]
	rbuf[2]=spi_read((uint8_t) 0x2BU);
 800089c:	202b      	movs	r0, #43	; 0x2b
 800089e:	f000 f8f3 	bl	8000a88 <spi_read>
 80008a2:	4603      	mov	r3, r0
 80008a4:	b21b      	sxth	r3, r3
 80008a6:	80bb      	strh	r3, [r7, #4]
	rbuf[3]=spi_read((uint8_t) 0x2DU);
 80008a8:	202d      	movs	r0, #45	; 0x2d
 80008aa:	f000 f8ed 	bl	8000a88 <spi_read>
 80008ae:	4603      	mov	r3, r0
 80008b0:	b21b      	sxth	r3, r3
 80008b2:	80fb      	strh	r3, [r7, #6]

	GPIOD->BSRR=(1<<12);
 80008b4:	4b13      	ldr	r3, [pc, #76]	; (8000904 <main+0x10c>)
 80008b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008ba:	619a      	str	r2, [r3, #24]
	for(int i=0;i<100000;i++) {}
 80008bc:	2300      	movs	r3, #0
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	e002      	b.n	80008c8 <main+0xd0>
 80008c2:	693b      	ldr	r3, [r7, #16]
 80008c4:	3301      	adds	r3, #1
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]
 80008ca:	4a0f      	ldr	r2, [pc, #60]	; (8000908 <main+0x110>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	ddf8      	ble.n	80008c2 <main+0xca>
    GPIOD->BSRR=(1<<28);
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <main+0x10c>)
 80008d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008d6:	619a      	str	r2, [r3, #24]
	for(int i=0;i<100000;i++) {}
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	e002      	b.n	80008e4 <main+0xec>
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	3301      	adds	r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	4a08      	ldr	r2, [pc, #32]	; (8000908 <main+0x110>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	ddf8      	ble.n	80008de <main+0xe6>
	{
 80008ec:	e7b2      	b.n	8000854 <main+0x5c>
 80008ee:	bf00      	nop
 80008f0:	66666666 	.word	0x66666666
 80008f4:	400a6666 	.word	0x400a6666
 80008f8:	40013000 	.word	0x40013000
 80008fc:	00989680 	.word	0x00989680
 8000900:	2000001c 	.word	0x2000001c
 8000904:	40020c00 	.word	0x40020c00
 8000908:	0001869f 	.word	0x0001869f

0800090c <gpio_init>:
    }


}
void gpio_init()
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
	//ENABLE THE PERIPHERAL CLOCK FOR GPIOD
    GPIOA_PCLK_EN();
 8000910:	4b0e      	ldr	r3, [pc, #56]	; (800094c <gpio_init+0x40>)
 8000912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000914:	4a0d      	ldr	r2, [pc, #52]	; (800094c <gpio_init+0x40>)
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOD_PCLK_EN() ;
 800091c:	4b0b      	ldr	r3, [pc, #44]	; (800094c <gpio_init+0x40>)
 800091e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000920:	4a0a      	ldr	r2, [pc, #40]	; (800094c <gpio_init+0x40>)
 8000922:	f043 0308 	orr.w	r3, r3, #8
 8000926:	6313      	str	r3, [r2, #48]	; 0x30
    //set the moder reg
	GPIOD->MODER|=(1<<24);
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <gpio_init+0x44>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a08      	ldr	r2, [pc, #32]	; (8000950 <gpio_init+0x44>)
 800092e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000932:	6013      	str	r3, [r2, #0]
	GPIOA->MODER|=(1<<0);
 8000934:	4b07      	ldr	r3, [pc, #28]	; (8000954 <gpio_init+0x48>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a06      	ldr	r2, [pc, #24]	; (8000954 <gpio_init+0x48>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	6013      	str	r3, [r2, #0]
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800
 8000950:	40020c00 	.word	0x40020c00
 8000954:	40020000 	.word	0x40020000

08000958 <spi_init>:
 *     PA6 - SPI1 MISO
 *     PA7 - SPI1 MOSI
 *     PE3 - SPI CS
 */
void spi_init()
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
		/*     PA5 - SPI1 SCK
		 *     PA6 - SPI1 MISO
		 *     PA7 - SPI1 MOSI
		 *     PE3 - SPI CS
		 */	// GPIOE->MODER &= 0xFFFFFF3F; // reset bits 6-7
	 SPI1_PCLK_EN() ;
 800095c:	4b45      	ldr	r3, [pc, #276]	; (8000a74 <spi_init+0x11c>)
 800095e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000960:	4a44      	ldr	r2, [pc, #272]	; (8000a74 <spi_init+0x11c>)
 8000962:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000966:	6453      	str	r3, [r2, #68]	; 0x44
	 GPIOA_PCLK_EN();
 8000968:	4b42      	ldr	r3, [pc, #264]	; (8000a74 <spi_init+0x11c>)
 800096a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096c:	4a41      	ldr	r2, [pc, #260]	; (8000a74 <spi_init+0x11c>)
 800096e:	f043 0301 	orr.w	r3, r3, #1
 8000972:	6313      	str	r3, [r2, #48]	; 0x30
	 GPIOD_PCLK_EN() ;
 8000974:	4b3f      	ldr	r3, [pc, #252]	; (8000a74 <spi_init+0x11c>)
 8000976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000978:	4a3e      	ldr	r2, [pc, #248]	; (8000a74 <spi_init+0x11c>)
 800097a:	f043 0308 	orr.w	r3, r3, #8
 800097e:	6313      	str	r3, [r2, #48]	; 0x30
	 GPIOE_PCLK_EN();
 8000980:	4b3c      	ldr	r3, [pc, #240]	; (8000a74 <spi_init+0x11c>)
 8000982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000984:	4a3b      	ldr	r2, [pc, #236]	; (8000a74 <spi_init+0x11c>)
 8000986:	f043 0310 	orr.w	r3, r3, #16
 800098a:	6313      	str	r3, [r2, #48]	; 0x30

	 GPIOE->MODER |= 1<<3*2; // set bits 6-7 to 0b01 (output)
 800098c:	4b3a      	ldr	r3, [pc, #232]	; (8000a78 <spi_init+0x120>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a39      	ldr	r2, [pc, #228]	; (8000a78 <spi_init+0x120>)
 8000992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000996:	6013      	str	r3, [r2, #0]
	 GPIOE->ODR |= (1 << 3);
 8000998:	4b37      	ldr	r3, [pc, #220]	; (8000a78 <spi_init+0x120>)
 800099a:	695b      	ldr	r3, [r3, #20]
 800099c:	4a36      	ldr	r2, [pc, #216]	; (8000a78 <spi_init+0x120>)
 800099e:	f043 0308 	orr.w	r3, r3, #8
 80009a2:	6153      	str	r3, [r2, #20]

	 GPIOA->OSPEEDR |= 0x0000FC00;
 80009a4:	4b35      	ldr	r3, [pc, #212]	; (8000a7c <spi_init+0x124>)
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	4a34      	ldr	r2, [pc, #208]	; (8000a7c <spi_init+0x124>)
 80009aa:	f443 437c 	orr.w	r3, r3, #64512	; 0xfc00
 80009ae:	6093      	str	r3, [r2, #8]
	 GPIOA->MODER|=(2<<10);
 80009b0:	4b32      	ldr	r3, [pc, #200]	; (8000a7c <spi_init+0x124>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a31      	ldr	r2, [pc, #196]	; (8000a7c <spi_init+0x124>)
 80009b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009ba:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER|=(2<<12);
 80009bc:	4b2f      	ldr	r3, [pc, #188]	; (8000a7c <spi_init+0x124>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a2e      	ldr	r2, [pc, #184]	; (8000a7c <spi_init+0x124>)
 80009c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009c6:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER|=(2<<14);
 80009c8:	4b2c      	ldr	r3, [pc, #176]	; (8000a7c <spi_init+0x124>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a2b      	ldr	r2, [pc, #172]	; (8000a7c <spi_init+0x124>)
 80009ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009d2:	6013      	str	r3, [r2, #0]
	 GPIOA->AFR[0] |= (0x5 << 20); 			// for pin 5
 80009d4:	4b29      	ldr	r3, [pc, #164]	; (8000a7c <spi_init+0x124>)
 80009d6:	6a1b      	ldr	r3, [r3, #32]
 80009d8:	4a28      	ldr	r2, [pc, #160]	; (8000a7c <spi_init+0x124>)
 80009da:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80009de:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] |= (0x5 << 24);			// for pin 6
 80009e0:	4b26      	ldr	r3, [pc, #152]	; (8000a7c <spi_init+0x124>)
 80009e2:	6a1b      	ldr	r3, [r3, #32]
 80009e4:	4a25      	ldr	r2, [pc, #148]	; (8000a7c <spi_init+0x124>)
 80009e6:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 80009ea:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] |= (0x5 << 28); 			// for pin 7
 80009ec:	4b23      	ldr	r3, [pc, #140]	; (8000a7c <spi_init+0x124>)
 80009ee:	6a1b      	ldr	r3, [r3, #32]
 80009f0:	4a22      	ldr	r2, [pc, #136]	; (8000a7c <spi_init+0x124>)
 80009f2:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 80009f6:	6213      	str	r3, [r2, #32]


	 GPIOD->MODER &= 0x00FFFFFF;
 80009f8:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <spi_init+0x128>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a20      	ldr	r2, [pc, #128]	; (8000a80 <spi_init+0x128>)
 80009fe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000a02:	6013      	str	r3, [r2, #0]
	 GPIOD->MODER |= 0x55000000;
 8000a04:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <spi_init+0x128>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a1d      	ldr	r2, [pc, #116]	; (8000a80 <spi_init+0x128>)
 8000a0a:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000a0e:	6013      	str	r3, [r2, #0]
	 GPIOD->ODR    = 0;
 8000a10:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <spi_init+0x128>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	615a      	str	r2, [r3, #20]


	SPI1->CR1|=(2<<2);					// 1. set BR[2:0] for serial clock baud rate (SPI_CR1)
 8000a16:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <spi_init+0x12c>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a1a      	ldr	r2, [pc, #104]	; (8000a84 <spi_init+0x12c>)
 8000a1c:	f043 0308 	orr.w	r3, r3, #8
 8000a20:	6013      	str	r3, [r2, #0]
	SPI1->CR1|=SPI_16BIT;				//2. set DFF bit for 8/16 bit data format
 8000a22:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <spi_init+0x12c>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a17      	ldr	r2, [pc, #92]	; (8000a84 <spi_init+0x12c>)
 8000a28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a2c:	6013      	str	r3, [r2, #0]
	SPI1->CR1|=CPOL_HIGH;				// 3. select CPOL and CPHA bits for data/clock relationship
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <spi_init+0x12c>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a14      	ldr	r2, [pc, #80]	; (8000a84 <spi_init+0x12c>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	6013      	str	r3, [r2, #0]
	SPI1->CR1|=CPHA_SECOND;				//2ndST RISING EDGE
 8000a3a:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <spi_init+0x12c>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a11      	ldr	r2, [pc, #68]	; (8000a84 <spi_init+0x12c>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6013      	str	r3, [r2, #0]

	//SPI1->CR1|=SPI_MSB;				//4.MSBFIRST bit for frame format

	SPI1->CR1|=SPI_SSM;					//5. set SSM bit for software slave management
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <spi_init+0x12c>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a0e      	ldr	r2, [pc, #56]	; (8000a84 <spi_init+0x12c>)
 8000a4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a50:	6013      	str	r3, [r2, #0]
    SPI1->CR1|=SPI_SSI;					//6. set SSI bit (important step)
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <spi_init+0x12c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <spi_init+0x12c>)
 8000a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5c:	6013      	str	r3, [r2, #0]
	SPI1->CR1|=SPI_MSTR;				// 8. choose master mode MSTR
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <spi_init+0x12c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a08      	ldr	r2, [pc, #32]	; (8000a84 <spi_init+0x12c>)
 8000a64:	f043 0304 	orr.w	r3, r3, #4
 8000a68:	6013      	str	r3, [r2, #0]
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	40020000 	.word	0x40020000
 8000a80:	40020c00 	.word	0x40020c00
 8000a84:	40013000 	.word	0x40013000

08000a88 <spi_read>:



uint16_t spi_read(uint32_t reg)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	 uint32_t temp;
	 GPIOE->ODR&=(0 << 3);//ENABLE THE SLAVE SELECT LINE
 8000a90:	4b1e      	ldr	r3, [pc, #120]	; (8000b0c <spi_read+0x84>)
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <spi_read+0x84>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	615a      	str	r2, [r3, #20]
	 uint16_t frame = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	81fb      	strh	r3, [r7, #14]
	 frame |= (uint16_t)(reg << 8);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	021b      	lsls	r3, r3, #8
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	89fb      	ldrh	r3, [r7, #14]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	81fb      	strh	r3, [r7, #14]
	 frame |= (1 << 15); // read bit
 8000aac:	89fb      	ldrh	r3, [r7, #14]
 8000aae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000ab2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000ab6:	81fb      	strh	r3, [r7, #14]
	 while(!(SPI1->SR&SPI_TXE)){ }
 8000ab8:	bf00      	nop
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <spi_read+0x88>)
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d0f9      	beq.n	8000aba <spi_read+0x32>
     SPI1->DR=frame;
 8000ac6:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <spi_read+0x88>)
 8000ac8:	89fb      	ldrh	r3, [r7, #14]
 8000aca:	60d3      	str	r3, [r2, #12]
	 while(!(SPI1->SR&SPI_RXNE))
 8000acc:	bf00      	nop
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <spi_read+0x88>)
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d0f9      	beq.n	8000ace <spi_read+0x46>
	 { }
	 temp =SPI1->DR;
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <spi_read+0x88>)
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	60bb      	str	r3, [r7, #8]
   	 while((SPI1->SR& 1<<7))
 8000ae0:	bf00      	nop
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <spi_read+0x88>)
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d1f9      	bne.n	8000ae2 <spi_read+0x5a>
   	 {

   	 }

	 GPIOE->ODR|=(1<< 3);
 8000aee:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <spi_read+0x84>)
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	4a06      	ldr	r2, [pc, #24]	; (8000b0c <spi_read+0x84>)
 8000af4:	f043 0308 	orr.w	r3, r3, #8
 8000af8:	6153      	str	r3, [r2, #20]

	 return temp;
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	b29b      	uxth	r3, r3
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3714      	adds	r7, #20
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40013000 	.word	0x40013000

08000b14 <spi_write>:

void spi_write(uint8_t reg, uint8_t data)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	460a      	mov	r2, r1
 8000b1e:	71fb      	strb	r3, [r7, #7]
 8000b20:	4613      	mov	r3, r2
 8000b22:	71bb      	strb	r3, [r7, #6]
	GPIOE->ODR&=(0 << 3); // enabl THE SLAVE SELECT LINE
 8000b24:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <spi_write+0x80>)
 8000b26:	695b      	ldr	r3, [r3, #20]
 8000b28:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <spi_write+0x80>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	615a      	str	r2, [r3, #20]

	uint32_t frame = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
	frame = data;
 8000b32:	79bb      	ldrb	r3, [r7, #6]
 8000b34:	60fb      	str	r3, [r7, #12]
	frame |= (uint16_t)(reg << 8);
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	021b      	lsls	r3, r3, #8
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	461a      	mov	r2, r3
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	60fb      	str	r3, [r7, #12]

	SPI1->DR=frame;
 8000b46:	4a14      	ldr	r2, [pc, #80]	; (8000b98 <spi_write+0x84>)
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	60d3      	str	r3, [r2, #12]
	while(!(SPI1->SR&SPI_TXE))
 8000b4c:	bf00      	nop
 8000b4e:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <spi_write+0x84>)
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d0f9      	beq.n	8000b4e <spi_write+0x3a>
     {

     }
	while(!(SPI1->SR&SPI_RXNE))
 8000b5a:	bf00      	nop
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <spi_write+0x84>)
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	f003 0301 	and.w	r3, r3, #1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d0f9      	beq.n	8000b5c <spi_write+0x48>
     {

     }
	(void)SPI1->DR;//dummy
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <spi_write+0x84>)
 8000b6a:	68db      	ldr	r3, [r3, #12]

	while((SPI1->SR& 1<<7))
 8000b6c:	bf00      	nop
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <spi_write+0x84>)
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d1f9      	bne.n	8000b6e <spi_write+0x5a>
     {}
    GPIOE->ODR|=(1<< 3);
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <spi_write+0x80>)
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <spi_write+0x80>)
 8000b80:	f043 0308 	orr.w	r3, r3, #8
 8000b84:	6153      	str	r3, [r2, #20]

}
 8000b86:	bf00      	nop
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40013000 	.word	0x40013000

08000b9c <tim_oc_init>:
}



void tim_oc_init()
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
	//TOGLING LD14 LD15 USING OUTPUT COPARE
    //enable the clock to the tim4
	GPIOD_PCLK_EN() ;
 8000ba0:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <tim_oc_init+0x88>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba4:	4a1f      	ldr	r2, [pc, #124]	; (8000c24 <tim_oc_init+0x88>)
 8000ba6:	f043 0308 	orr.w	r3, r3, #8
 8000baa:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOD->MODER|=(2<<14*2);
 8000bac:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <tim_oc_init+0x8c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a1d      	ldr	r2, [pc, #116]	; (8000c28 <tim_oc_init+0x8c>)
 8000bb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000bb6:	6013      	str	r3, [r2, #0]
	GPIOD->AFR[1]|=(2<<24);
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <tim_oc_init+0x8c>)
 8000bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bbc:	4a1a      	ldr	r2, [pc, #104]	; (8000c28 <tim_oc_init+0x8c>)
 8000bbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bc2:	6253      	str	r3, [r2, #36]	; 0x24

	TIM4_PERIPHERAL_CLK_ENABLE();
 8000bc4:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <tim_oc_init+0x88>)
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc8:	4a16      	ldr	r2, [pc, #88]	; (8000c24 <tim_oc_init+0x88>)
 8000bca:	f043 0304 	orr.w	r3, r3, #4
 8000bce:	6413      	str	r3, [r2, #64]	; 0x40

    TIM4->PSC|=160000-1;									//slect the prescaler
 8000bd0:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <tim_oc_init+0x90>)
 8000bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd4:	4a15      	ldr	r2, [pc, #84]	; (8000c2c <tim_oc_init+0x90>)
 8000bd6:	f443 331c 	orr.w	r3, r3, #159744	; 0x27000
 8000bda:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000bde:	6293      	str	r3, [r2, #40]	; 0x28

    TIM4->ARR=1000;
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <tim_oc_init+0x90>)
 8000be2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000be6:	62da      	str	r2, [r3, #44]	; 0x2c

    TIM4->CCMR2|=0x30;										//toggle on match
 8000be8:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <tim_oc_init+0x90>)
 8000bea:	69db      	ldr	r3, [r3, #28]
 8000bec:	4a0f      	ldr	r2, [pc, #60]	; (8000c2c <tim_oc_init+0x90>)
 8000bee:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000bf2:	61d3      	str	r3, [r2, #28]

    TIM4->CCR[3]=400;
 8000bf4:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <tim_oc_init+0x90>)
 8000bf6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000bfa:	641a      	str	r2, [r3, #64]	; 0x40

    TIM4->CCER|=(1<<8);
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <tim_oc_init+0x90>)
 8000bfe:	6a1b      	ldr	r3, [r3, #32]
 8000c00:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <tim_oc_init+0x90>)
 8000c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c06:	6213      	str	r3, [r2, #32]

    TIM4->CNT=0;
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <tim_oc_init+0x90>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24

    TIM4->CR1|=(1<<0);
 8000c0e:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <tim_oc_init+0x90>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a06      	ldr	r2, [pc, #24]	; (8000c2c <tim_oc_init+0x90>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6013      	str	r3, [r2, #0]

}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020c00 	.word	0x40020c00
 8000c2c:	40000800 	.word	0x40000800

08000c30 <UART_Rx_TX_Init>:
    TIM1->CR1|=(1<<0);                                  //ENABLE THE TIMER
}


static void UART_Rx_TX_Init(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
	GPIOA_PCLK_EN();
 8000c34:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <UART_Rx_TX_Init+0x60>)
 8000c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c38:	4a15      	ldr	r2, [pc, #84]	; (8000c90 <UART_Rx_TX_Init+0x60>)
 8000c3a:	f043 0301 	orr.w	r3, r3, #1
 8000c3e:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER|=(2<<2*2)|(2<<3*2);
 8000c40:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <UART_Rx_TX_Init+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a13      	ldr	r2, [pc, #76]	; (8000c94 <UART_Rx_TX_Init+0x64>)
 8000c46:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000c4a:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0]|=(7<<2*4)|(7<<3*4);
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <UART_Rx_TX_Init+0x64>)
 8000c4e:	6a1b      	ldr	r3, [r3, #32]
 8000c50:	4a10      	ldr	r2, [pc, #64]	; (8000c94 <UART_Rx_TX_Init+0x64>)
 8000c52:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000c56:	6213      	str	r3, [r2, #32]

	USART2_PCLK_EN();									//enble the peripheral clock
 8000c58:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <UART_Rx_TX_Init+0x60>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5c:	4a0c      	ldr	r2, [pc, #48]	; (8000c90 <UART_Rx_TX_Init+0x60>)
 8000c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c62:	6413      	str	r3, [r2, #64]	; 0x40

	USART2->BRR|=((SYSTEMCLK+BAUDRATE/2)/BAUDRATE);		//set the baudrate
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <UART_Rx_TX_Init+0x68>)
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	4a0b      	ldr	r2, [pc, #44]	; (8000c98 <UART_Rx_TX_Init+0x68>)
 8000c6a:	f443 63d0 	orr.w	r3, r3, #1664	; 0x680
 8000c6e:	f043 0303 	orr.w	r3, r3, #3
 8000c72:	6093      	str	r3, [r2, #8]

	USART2->CR1=CR1_RE|CR1_TE;							//Enable the uart RX and TX
 8000c74:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <UART_Rx_TX_Init+0x68>)
 8000c76:	220c      	movs	r2, #12
 8000c78:	60da      	str	r2, [r3, #12]

	USART2->CR1|=CR1_UE;								//ENABLE THE UART
 8000c7a:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <UART_Rx_TX_Init+0x68>)
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	4a06      	ldr	r2, [pc, #24]	; (8000c98 <UART_Rx_TX_Init+0x68>)
 8000c80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c84:	60d3      	str	r3, [r2, #12]

}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020000 	.word	0x40020000
 8000c98:	40004400 	.word	0x40004400

08000c9c <USART_WRITE>:

static void USART_WRITE(uint8_t ch)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]

	while(!(USART2->SR&SR_TXE)){}						//wait till the uart tx data register is empty
 8000ca6:	bf00      	nop
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <USART_WRITE+0x2c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d0f9      	beq.n	8000ca8 <USART_WRITE+0xc>

	USART2->DR=(ch&0xFF);								//write the data to the data register
 8000cb4:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <USART_WRITE+0x2c>)
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	6053      	str	r3, [r2, #4]

}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40004400 	.word	0x40004400

08000ccc <pwm_init>:
	return USART2->DR;									/*Read the data*/
}


void pwm_init()
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

	GPIOD_PCLK_EN() ;
 8000cd0:	4b1f      	ldr	r3, [pc, #124]	; (8000d50 <pwm_init+0x84>)
 8000cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd4:	4a1e      	ldr	r2, [pc, #120]	; (8000d50 <pwm_init+0x84>)
 8000cd6:	f043 0308 	orr.w	r3, r3, #8
 8000cda:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOD->MODER|=(2<<30);
 8000cdc:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <pwm_init+0x88>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a1c      	ldr	r2, [pc, #112]	; (8000d54 <pwm_init+0x88>)
 8000ce2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ce6:	6013      	str	r3, [r2, #0]
	GPIOD->AFR[1]|=(2<<28);
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <pwm_init+0x88>)
 8000cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cec:	4a19      	ldr	r2, [pc, #100]	; (8000d54 <pwm_init+0x88>)
 8000cee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000cf2:	6253      	str	r3, [r2, #36]	; 0x24
	TIM4_PERIPHERAL_CLK_ENABLE();
 8000cf4:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <pwm_init+0x84>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	4a15      	ldr	r2, [pc, #84]	; (8000d50 <pwm_init+0x84>)
 8000cfa:	f043 0304 	orr.w	r3, r3, #4
 8000cfe:	6413      	str	r3, [r2, #64]	; 0x40
	TIM4->PSC|=10-1;						        	//slect the prescaler
 8000d00:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <pwm_init+0x8c>)
 8000d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d04:	4a14      	ldr	r2, [pc, #80]	; (8000d58 <pwm_init+0x8c>)
 8000d06:	f043 0309 	orr.w	r3, r3, #9
 8000d0a:	6293      	str	r3, [r2, #40]	; 0x28
	TIM4->ARR=26667-1;
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <pwm_init+0x8c>)
 8000d0e:	f646 022a 	movw	r2, #26666	; 0x682a
 8000d12:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->CNT=0;
 8000d14:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <pwm_init+0x8c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->CCMR2|=6<<12;					        		//toggle on match
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <pwm_init+0x8c>)
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <pwm_init+0x8c>)
 8000d20:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000d24:	61d3      	str	r3, [r2, #28]
    TIM4->CCER|=(1<<12);
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <pwm_init+0x8c>)
 8000d28:	6a1b      	ldr	r3, [r3, #32]
 8000d2a:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <pwm_init+0x8c>)
 8000d2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d30:	6213      	str	r3, [r2, #32]
	TIM4->CCR[3]=8889-1;
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <pwm_init+0x8c>)
 8000d34:	f242 22b8 	movw	r2, #8888	; 0x22b8
 8000d38:	641a      	str	r2, [r3, #64]	; 0x40
	TIM4->CR1|=(1<<0);
 8000d3a:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <pwm_init+0x8c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a06      	ldr	r2, [pc, #24]	; (8000d58 <pwm_init+0x8c>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6013      	str	r3, [r2, #0]
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020c00 	.word	0x40020c00
 8000d58:	40000800 	.word	0x40000800

08000d5c <ADC_init_TIMER_TRIGER>:
void ADC_init_TIMER_TRIGER()
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

	GPIOD_PCLK_EN();
 8000d60:	4b31      	ldr	r3, [pc, #196]	; (8000e28 <ADC_init_TIMER_TRIGER+0xcc>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d64:	4a30      	ldr	r2, [pc, #192]	; (8000e28 <ADC_init_TIMER_TRIGER+0xcc>)
 8000d66:	f043 0308 	orr.w	r3, r3, #8
 8000d6a:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOD->MODER|=(2<<30);
 8000d6c:	4b2f      	ldr	r3, [pc, #188]	; (8000e2c <ADC_init_TIMER_TRIGER+0xd0>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a2e      	ldr	r2, [pc, #184]	; (8000e2c <ADC_init_TIMER_TRIGER+0xd0>)
 8000d72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d76:	6013      	str	r3, [r2, #0]
	GPIOD->AFR[1]|=(2<<28);
 8000d78:	4b2c      	ldr	r3, [pc, #176]	; (8000e2c <ADC_init_TIMER_TRIGER+0xd0>)
 8000d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7c:	4a2b      	ldr	r2, [pc, #172]	; (8000e2c <ADC_init_TIMER_TRIGER+0xd0>)
 8000d7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000d82:	6253      	str	r3, [r2, #36]	; 0x24

	TIM1_PERIPHERAL_CLK_ENABLE();				//I AM CONNECTING THE PA0 AS INPUT TO TIM1->PA8 AF1,
 8000d84:	4b28      	ldr	r3, [pc, #160]	; (8000e28 <ADC_init_TIMER_TRIGER+0xcc>)
 8000d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d88:	4a27      	ldr	r2, [pc, #156]	; (8000e28 <ADC_init_TIMER_TRIGER+0xcc>)
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	6453      	str	r3, [r2, #68]	; 0x44


	TIM1->PSC|=16;								//SET THE PRESCALER
 8000d90:	4b27      	ldr	r3, [pc, #156]	; (8000e30 <ADC_init_TIMER_TRIGER+0xd4>)
 8000d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d94:	4a26      	ldr	r2, [pc, #152]	; (8000e30 <ADC_init_TIMER_TRIGER+0xd4>)
 8000d96:	f043 0310 	orr.w	r3, r3, #16
 8000d9a:	6293      	str	r3, [r2, #40]	; 0x28
	TIM1->ARR|=100;
 8000d9c:	4b24      	ldr	r3, [pc, #144]	; (8000e30 <ADC_init_TIMER_TRIGER+0xd4>)
 8000d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da0:	4a23      	ldr	r2, [pc, #140]	; (8000e30 <ADC_init_TIMER_TRIGER+0xd4>)
 8000da2:	f043 0364 	orr.w	r3, r3, #100	; 0x64
 8000da6:	62d3      	str	r3, [r2, #44]	; 0x2c

	TIM1->CR2&=~(1<<4);
 8000da8:	4b21      	ldr	r3, [pc, #132]	; (8000e30 <ADC_init_TIMER_TRIGER+0xd4>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	4a20      	ldr	r2, [pc, #128]	; (8000e30 <ADC_init_TIMER_TRIGER+0xd4>)
 8000dae:	f023 0310 	bic.w	r3, r3, #16
 8000db2:	6053      	str	r3, [r2, #4]
	TIM1->CR2|=(2<<4);							//UPDATE EVENT
 8000db4:	4b1e      	ldr	r3, [pc, #120]	; (8000e30 <ADC_init_TIMER_TRIGER+0xd4>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	4a1d      	ldr	r2, [pc, #116]	; (8000e30 <ADC_init_TIMER_TRIGER+0xd4>)
 8000dba:	f043 0320 	orr.w	r3, r3, #32
 8000dbe:	6053      	str	r3, [r2, #4]
	TIM1->CR1|=(1<<0);							//ENABLE THE TIMER
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <ADC_init_TIMER_TRIGER+0xd4>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a1a      	ldr	r2, [pc, #104]	; (8000e30 <ADC_init_TIMER_TRIGER+0xd4>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	6013      	str	r3, [r2, #0]

	//adc1 ch1 is connected to PA1
	ADC1_PERIPHERAL_CLK_ENABLE();				//enable the periph clock
 8000dcc:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <ADC_init_TIMER_TRIGER+0xcc>)
 8000dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd0:	4a15      	ldr	r2, [pc, #84]	; (8000e28 <ADC_init_TIMER_TRIGER+0xcc>)
 8000dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd6:	6453      	str	r3, [r2, #68]	; 0x44

	ADC1->CR2|=(1<<1);							//continous conversion mode
 8000dd8:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <ADC_init_TIMER_TRIGER+0xd8>)
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	4a15      	ldr	r2, [pc, #84]	; (8000e34 <ADC_init_TIMER_TRIGER+0xd8>)
 8000dde:	f043 0302 	orr.w	r3, r3, #2
 8000de2:	6093      	str	r3, [r2, #8]
	ADC1->SMPR[0]|=3<<0;						//SAMPLING TIME 480 CYCLES
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <ADC_init_TIMER_TRIGER+0xd8>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <ADC_init_TIMER_TRIGER+0xd8>)
 8000dea:	f043 0303 	orr.w	r3, r3, #3
 8000dee:	60d3      	str	r3, [r2, #12]
	ADC1->SQR[2]=(1<<0);						//INITIATIN THE SEQUENCING  secleting the chanel 1
 8000df0:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <ADC_init_TIMER_TRIGER+0xd8>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	635a      	str	r2, [r3, #52]	; 0x34
	ADC1->SQR[0]=0x00;							//specifying the no of conversion for the single chanel
 8000df6:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <ADC_init_TIMER_TRIGER+0xd8>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	62da      	str	r2, [r3, #44]	; 0x2c


	ADC1->CR2|=(1<<28);							//external trigger enable
 8000dfc:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <ADC_init_TIMER_TRIGER+0xd8>)
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	4a0c      	ldr	r2, [pc, #48]	; (8000e34 <ADC_init_TIMER_TRIGER+0xd8>)
 8000e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e06:	6093      	str	r3, [r2, #8]
	ADC1->CR2|=(0<<24)|(0<<25)|(0<<26)|(0<<27);	//external trigger event selection
 8000e08:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <ADC_init_TIMER_TRIGER+0xd8>)
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <ADC_init_TIMER_TRIGER+0xd8>)
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	6093      	str	r3, [r2, #8]
	ADC1->CR2|=1<<0;							//ADC ON
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <ADC_init_TIMER_TRIGER+0xd8>)
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	4a07      	ldr	r2, [pc, #28]	; (8000e34 <ADC_init_TIMER_TRIGER+0xd8>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	6093      	str	r3, [r2, #8]

}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020c00 	.word	0x40020c00
 8000e30:	40010000 	.word	0x40010000
 8000e34:	40012000 	.word	0x40012000

08000e38 <adc_start>:
	ADC1->CR2|=1<<0;							//ADC ON

}

void adc_start()
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
	ADC1->CR2|=1<<30;    						//START THE CONVERSION
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <adc_start+0x1c>)
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <adc_start+0x1c>)
 8000e42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000e46:	6093      	str	r3, [r2, #8]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40012000 	.word	0x40012000

08000e58 <adc_get_data>:


uint32_t adc_get_data()
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
	while(!(ADC1->SR&(1<<1))){}                 //wait for EOC flag to set
 8000e5c:	bf00      	nop
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <adc_get_data+0x20>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d0f9      	beq.n	8000e5e <adc_get_data+0x6>
    return ADC1->DR;                            //rea the data
 8000e6a:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <adc_get_data+0x20>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	40012000 	.word	0x40012000

08000e7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e7c:	480d      	ldr	r0, [pc, #52]	; (8000eb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e7e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e80:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e84:	480c      	ldr	r0, [pc, #48]	; (8000eb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e86:	490d      	ldr	r1, [pc, #52]	; (8000ebc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e88:	4a0d      	ldr	r2, [pc, #52]	; (8000ec0 <LoopForever+0xe>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e8c:	e002      	b.n	8000e94 <LoopCopyDataInit>

08000e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e92:	3304      	adds	r3, #4

08000e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e98:	d3f9      	bcc.n	8000e8e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e9c:	4c0a      	ldr	r4, [pc, #40]	; (8000ec8 <LoopForever+0x16>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea0:	e001      	b.n	8000ea6 <LoopFillZerobss>

08000ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea4:	3204      	adds	r2, #4

08000ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea8:	d3fb      	bcc.n	8000ea2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000eaa:	f000 f811 	bl	8000ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eae:	f7ff fca3 	bl	80007f8 <main>

08000eb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000eb2:	e7fe      	b.n	8000eb2 <LoopForever>
  ldr   r0, =_estack
 8000eb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ebc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000ec0:	08000f38 	.word	0x08000f38
  ldr r2, =_sbss
 8000ec4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000ec8:	20000020 	.word	0x20000020

08000ecc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ecc:	e7fe      	b.n	8000ecc <ADC_IRQHandler>
	...

08000ed0 <__libc_init_array>:
 8000ed0:	b570      	push	{r4, r5, r6, lr}
 8000ed2:	4d0d      	ldr	r5, [pc, #52]	; (8000f08 <__libc_init_array+0x38>)
 8000ed4:	4c0d      	ldr	r4, [pc, #52]	; (8000f0c <__libc_init_array+0x3c>)
 8000ed6:	1b64      	subs	r4, r4, r5
 8000ed8:	10a4      	asrs	r4, r4, #2
 8000eda:	2600      	movs	r6, #0
 8000edc:	42a6      	cmp	r6, r4
 8000ede:	d109      	bne.n	8000ef4 <__libc_init_array+0x24>
 8000ee0:	4d0b      	ldr	r5, [pc, #44]	; (8000f10 <__libc_init_array+0x40>)
 8000ee2:	4c0c      	ldr	r4, [pc, #48]	; (8000f14 <__libc_init_array+0x44>)
 8000ee4:	f000 f818 	bl	8000f18 <_init>
 8000ee8:	1b64      	subs	r4, r4, r5
 8000eea:	10a4      	asrs	r4, r4, #2
 8000eec:	2600      	movs	r6, #0
 8000eee:	42a6      	cmp	r6, r4
 8000ef0:	d105      	bne.n	8000efe <__libc_init_array+0x2e>
 8000ef2:	bd70      	pop	{r4, r5, r6, pc}
 8000ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ef8:	4798      	blx	r3
 8000efa:	3601      	adds	r6, #1
 8000efc:	e7ee      	b.n	8000edc <__libc_init_array+0xc>
 8000efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f02:	4798      	blx	r3
 8000f04:	3601      	adds	r6, #1
 8000f06:	e7f2      	b.n	8000eee <__libc_init_array+0x1e>
 8000f08:	08000f30 	.word	0x08000f30
 8000f0c:	08000f30 	.word	0x08000f30
 8000f10:	08000f30 	.word	0x08000f30
 8000f14:	08000f34 	.word	0x08000f34

08000f18 <_init>:
 8000f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f1a:	bf00      	nop
 8000f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f1e:	bc08      	pop	{r3}
 8000f20:	469e      	mov	lr, r3
 8000f22:	4770      	bx	lr

08000f24 <_fini>:
 8000f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f26:	bf00      	nop
 8000f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f2a:	bc08      	pop	{r3}
 8000f2c:	469e      	mov	lr, r3
 8000f2e:	4770      	bx	lr
